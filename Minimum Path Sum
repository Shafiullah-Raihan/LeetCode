///https://leetcode.com/problems/minimum-path-sum/description/?envType=study-plan-v2&envId=top-interview-150

class Solution {
public:
    int dfs(vector<vector<int>>& grid, int i, int j, vector<vector<int>>& dp){
        if(i == 0 && j == 0) return grid[i][j];

        if(i<0 || j<0) return INT_MAX;

        if(dp[i][j] != -1) return dp[i][j];

        return dp[i][j] = grid[i][j] + min(dfs(grid,i-1,j,dp),dfs(grid,i,j-1,dp));
    }

    int minPathSum(vector<vector<int>>& grid) {
        
        int n = grid.size(),m = grid[0].size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return dfs(grid,n-1,m-1,dp);
    }
};
