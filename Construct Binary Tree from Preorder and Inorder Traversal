///https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/description/?envType=study-plan-v2&envId=top-interview-150


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        deque<int>dq(preorder.begin(), preorder.end());
        return makeTree(dq,inorder);
    }

    TreeNode* makeTree(deque<int>& pq, vector<int>& inorder)
    {
        if(!pq.empty() && !inorder.empty()){
            int val = pq.front();
            pq.pop_front();
            TreeNode* root = new TreeNode(val);
            auto it = find(inorder.begin(), inorder.end(),val);
            int index = it - inorder.begin();
            vector<int>left(inorder.begin(),inorder.begin()+index);
            vector<int>right(inorder.begin()+index+1,inorder.end());
            root->left = makeTree(pq,left);
            root->right = makeTree(pq,right);
            return root;


        }
        return nullptr;
    }





    
};
