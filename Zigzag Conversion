///https://leetcode.com/problems/zigzag-conversion/description/?envType=study-plan-v2&envId=top-interview-150
/// First optionðŸ˜Ž
class Solution {
public:
    string convert(string s, int numRows) {
        if(numRows==1 || numRows>= s.size()) return s;

        int index = 0, track = 1;
        vector<vector<char>> rows(numRows);
        for(auto c: s){
            rows[index].push_back(c);
            if(index==0){
                track = 1;
            }
            else if(index== numRows-1){
                track = -1;
            }

            index+= track;
        }

        string result;
        for(auto u:rows){
            for(char c:u){
                result+= c;
            }
        }
        return result;

    }
};



//Second option ðŸ˜Ž

class Solution {
public:
    string convert(string s, int numRows) {
        if (numRows == 1 || numRows >= s.length()) {
            return s;
        }

        vector<string> rows(min(numRows, int(s.size())));
        int idx = 0;
        bool goingDown = false;

        for (char c : s) {
            rows[idx] += c;  // Add character to current row
            if (idx == 0 || idx == numRows - 1) {
                goingDown = !goingDown;  // Change direction at top or bottom row
            }
            idx += goingDown ? 1 : -1;  // Move up or down
        }

        // Combine all rows into the result string
        string result;
        for (const string& row : rows) {
            result += row;
        }

        return result;
    }
};
