///https://leetcode.com/problems/binary-tree-right-side-view/description/?envType=study-plan-v2&envId=top-interview-150


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        if(!root) return {};
        
        queue<TreeNode*> q;

        q.push(root);

        vector<int> v;

        while(!q.empty())
        {
            int sz = q.size();
            
            for(int i=0;i<sz;i++)
            {
                TreeNode* first = q.front();
                q.pop();
                if(i==sz-1){
                    v.push_back(first->val);
                }

                if(first->left){
                    q.push(first->left);
                }
                if(first->right){
                    q.push(first->right);
                }

            }
            
        }

    return v;


    }
};
