///https://leetcode.com/problems/minimum-time-to-visit-a-cell-in-a-grid/description/?envType=daily-question&envId=2024-11-29


int dx[] = { 0, 0, +1, -1, -1 , +1, -1, +1 };
int dy[] = { +1, -1, 0, 0, -1, +1, +1, -1 };
class Solution {
public:
    

    int minimumTime(vector<vector<int>>& grid) {

        int rows = grid.size(), columns = grid[0].size();

        if(grid[0][1]>1 && grid[1][0]>1){
            return -1;
        } 
        vector<vector<bool>> visited (rows, vector<bool>(columns, false));

        priority_queue<vector<int>, vector<vector<int>>, greater<>>pq;

        pq.push({grid[0][0],0,0});

        while(!pq.empty())
        {
            auto u = pq.top();
            int time = u[0],row = u[1], col = u[2];
            pq.pop();
            if(row == rows-1 && col ==columns-1){
                return time;
            }

            if(visited[row][col]) continue;
            visited[row][col] = true;

            for(int i=0;i<4;i++){
                int x = row + dx[i], y = col + dy[i];
                if(!isValid(visited,x,y)){
                    continue;
                }
                int wait = ((grid[x][y] - time)%2 == 0) ? 1 : 0;
                int nextTime = max(grid[x][y] + wait, time +1);
                pq.push({nextTime,x,y});

            }


        }
        return -1;



        
    }

    
    private:
    bool isValid(vector<vector<bool>>& visited , int row, int col)
    {
        return row>=0 && col >=0 && row<visited.size() && col < visited[0].size() && !visited[row][col];
    }
};
