///https://leetcode.com/problems/path-sum-ii/description/?envType=problem-list-v2&envId=depth-first-search&difficulty=EASY%2CMEDIUM


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {

    void pathCal(TreeNode* root,int targetSum,vector<int>& v,vector<vector<int>>& ans)
    {
        if(!root) return ;
        v.push_back(root->val);
        if(root->left == nullptr && root->right == nullptr){
            if(targetSum == root->val){
                ans.push_back(v);
            }
        }
        pathCal(root->left,targetSum - root->val , v,ans);
        pathCal(root->right,targetSum - root->val , v,ans);
        v.pop_back();

    }






public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> ans;
        vector<int>v;
        pathCal(root,targetSum ,v,ans);
        return ans;
    }
};
