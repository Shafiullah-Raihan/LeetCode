///https://leetcode.com/problems/kth-smallest-element-in-a-bst/description/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int number(TreeNode* root, int k,int &cnt,int &res){
      if(root == NULL || cnt >= k){
          return res;
      }
      number(root->left,k,cnt,res);
      cnt++;
      if(cnt==k){
          res = root->val;
          return res;
      }
      
      number(root->right,k,cnt,res);
      return res;
      
    }

    int kthSmallest(TreeNode* root, int k) {
        int cnt =0,res=-1;
        return number(root,k,cnt,res);
    }

    
};

