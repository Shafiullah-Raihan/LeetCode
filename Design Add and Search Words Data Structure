///https://leetcode.com/problems/design-add-and-search-words-data-structure/description/?envType=study-plan-v2&envId=top-interview-150

class TrieNode{
    public:

    TrieNode* children[26];
    bool isLast ;
    TrieNode(){
        for(int i=0;i<26;i++) children[i] = nullptr;
        isLast = false;
    }

};
TrieNode* root;
bool searchNode(string& word,int index,TrieNode* node){
    if(!node) return false;
    if(index == word.size()){
        return node->isLast;
    }
    char c  = word[index];
    if(c == '.'){
        for(int i=0;i<26;i++){
            if(searchNode(word,index+1,node->children[i])){
                return true;
            }
        }
        return false;
    }
    else{
        int charDigit = c - 'a';
        return searchNode(word,index+1,node->children[charDigit]);
    }
}



class WordDictionary {
public:
    
    

    WordDictionary() {
        root = new TrieNode();
    }
    
    void addWord(string word) {
        TrieNode* node = root;
        for(auto u:word){
            int index = u - 'a';
            if(!node->children[index]){
                node -> children[index] = new TrieNode();

            }
            node = node ->children[index];

        }
        node->isLast = true;
    }
    
    bool search(string word) {
        return searchNode(word,0,root);
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */
