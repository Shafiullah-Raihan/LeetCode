///https://leetcode.com/problems/find-if-path-exists-in-graph/



class DSU
{
private:
    vector<int> parent,rnk;
public:

    DSU(int n)
    {

        parent.resize(n),rnk.resize(n,0);
        iota(parent.begin(),parent.end(),0);

    }
    int fnd(int x)
    {
        if(parent[x] != x)
        {
            parent[x] = fnd(parent[x]);
        }
        return parent[x];
    }
    void unionFind(int x,int y)
    {
        int rootX = fnd(x);
        int rootY = fnd(y);
        if(rootX != rootY)
        {
            if(rnk[rootX]> rnk[rootY]){
                parent[rootY] = rootX;
            }
            else if(rnk[rootX] < rnk[rootY]){
                parent[rootX] = rootY;
            }
            else{
                parent[rootY] = rootX;
                rnk[rootX]++;
            }
        }
    }
};


class Solution {
public:
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        //int n = edge.size();
        DSU dsu(n);
        for(auto& u: edges)
        {
            int first = u[0], second = u[1];
            dsu.unionFind(first,second);
        }
        return dsu.fnd(source) == dsu.fnd(destination);
    }
};
