///https://leetcode.com/problems/n-queens/

class Solution {
public:
    bool isSafe(vector<string>& board,int row,int col,int n)
    {
        int orRow = row,orCol = col;
        while(row>=0 && col >=0){
            if(board[row][col] == 'Q') return false;
            row--,col--;
        }
        row = orRow,col = orCol;
        while(col>=0){
            if(board[row][col] == 'Q') return false;
            col--;
        }
        row = orRow,col = orCol;
        while(row<n && col>=0){
            if(board[row][col] == 'Q'){
                return false;
            }
            row++,col--;
        }
        return true;
    }

    void solve(int col,vector<string>& board,vector<vector<string>>& ans, int n)
    {
        if(col == n){
            ans.push_back(board);
            return ;
        }
        for(int row=0;row<n;row++)
        {
            if(isSafe(board,row,col,n))
            {
                board[row][col] = 'Q';
                solve(col+1,board,ans,n);
                board[row][col] = '.';
            }
        }
    }


    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>>ans;
        vector<string>board(n,string(n,'.'));
        solve(0,board,ans,n);
        return ans;
    }
};
