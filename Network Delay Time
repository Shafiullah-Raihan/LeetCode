///https://leetcode.com/problems/network-delay-time/description/


class Solution {
public:
    int networkDelayTime(vector<vector<int>>& times, int n, int k) {
        if(n==1) return 0;

        vector<vector<int>> adj[n];
        for(int i=0;i<times.size();i++){
            vector<int>v;
            v.push_back(times[i][1]-1);
            v.push_back(times[i][2]);
            adj[times[i][0]-1].push_back(v);
        }
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;

         vector<int> dist(n);
         for(int i=0;i<n;i++){
            dist[i] = 1e9;
         }
         dist[k-1] = 0;
         pq.push({0,k-1});
         int mintime =0;

         while(!pq.empty()){
            int dis = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            for(auto u:adj[node]){
                int edgeWeight = u[1];
                int edgeNode = u[0];
                if(edgeWeight>dist[edgeNode]) continue;

                if(dis + edgeWeight<dist[edgeNode]){
                    dist[edgeNode] = dis + edgeWeight;
                    pq.push({dist[edgeNode],edgeNode});
                }
            }
         }

         for(int i=0;i<n;i++){
            if(dist[i]== 1e9) return -1;
            mintime = max(dist[i],mintime);
         }
         return mintime;

    }
};
