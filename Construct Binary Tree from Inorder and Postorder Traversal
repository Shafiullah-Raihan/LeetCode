///https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/description/?envType=study-plan-v2&envId=top-interview-150


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        deque<int> dq(postorder.begin(), postorder.end());
        return makeTree(dq, inorder);
    }

private:
    TreeNode* makeTree(deque<int>& dq, vector<int>& inorder) {
        if (!dq.empty() && !inorder.empty()) {
            int val = dq.back();
            dq.pop_back();
            TreeNode* root = new TreeNode(val);
            
            auto it = find(inorder.begin(), inorder.end(), val);
            int index = it - inorder.begin();
            
            // Right subtree should be built before the left subtree
            vector<int> right(inorder.begin() + index + 1, inorder.end());
            vector<int> left(inorder.begin(), inorder.begin() + index);
            
            root->right = makeTree(dq, right);
            root->left = makeTree(dq, left);
            
            return root;
        }
        return nullptr;
    }
};
