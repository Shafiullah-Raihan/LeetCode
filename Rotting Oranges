///https://leetcode.com/problems/rotting-oranges/


class Solution {
public:
    int dx[4] = {1,-1,0,0}, dy[4] = {0,0,1,-1};
    int orangesRotting(vector<vector<int>>& grid) {
        int totalApple= 0, cnt =0,time =0;
        queue<pair<int,int>>q;
        int n= grid.size(), m = grid[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] !=0){
                    totalApple++;
                }
                if(grid[i][j] == 2){
                    q.push({i,j});
                }
            }
        }

        while(!q.empty()){
            int k = q.size();
            cnt += k;
            while(k--){
                auto [x,y] = q.front();
                q.pop();
                for(int i=0;i<4;i++){
                    int newX = x+ dx[i], newY = y + dy[i];
                    if(newX<0 || newX >= n || newY <0 || newY>=m){
                        continue;
                    } 
                    if(grid[newX][newY] == 1){
                        grid[newX][newY] = 2;
                        q.push({newX,newY});
                    }            
                    }
                    

        }
        if(!q.empty()) time++;
        }
        if(cnt == totalApple) return time;
        return -1;


    }
};
