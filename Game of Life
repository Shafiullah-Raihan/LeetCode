////https://leetcode.com/problems/game-of-life/description/?envType=study-plan-v2&envId=top-interview-150



class Solution {
public:
    int countNeighbour(int m,int n,int i,int j,vector<vector<int>>& board){
        int dx[] = {-1, -1, -1, 0, 1, 1, 1, 0};
        int dy[] = {-1, 0, 1, 1, 1, 0, -1, -1};
        int countOne=0;
        for(int k=0;k<8;k++){
            int newX = i + dx[k];
            int newY = j + dy[k];

            if(newX>=0 && newX<m && newY>=0 && newY <n){
                if(board[newX][newY] ==1){
                    countOne++;
                }
            }
        }
        return countOne;
    }



    void gameOfLife(vector<vector<int>>& board) {
        
        int m= board.size(),n = board[0].size();
        vector<vector<int>> newBoard(m,vector<int>(n,0));

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){

                int countOne= countNeighbour(m,n,i,j,board);
                if(board[i][j] ==0){
                    if(countOne==3) newBoard[i][j] = 1;
                }
                else{
                    if(countOne==2 || countOne==3){
                        newBoard[i][j] = 1;
                    }
                }
            }
        }
        board = newBoard;

    }
};
