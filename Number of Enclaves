///https://leetcode.com/problems/number-of-enclaves/description/




class Solution {
public:
    int numEnclaves(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<bool>> vis(n, vector<bool>(m, false));
        queue<pair<int, int>> q;

        int dx[4] = {0, 0, 1, -1};
        int dy[4] = {1, -1, 0, 0};

        auto markBoundaryConnectedLand = [&](int r, int c) {
            if (grid[r][c] == 1 && !vis[r][c]) {
                vis[r][c] = true;
                q.push({r, c});
            }
        };

        for (int i = 0; i < n; i++) {
            markBoundaryConnectedLand(i, 0);
            markBoundaryConnectedLand(i, m - 1);
        }

        for (int i = 0; i < m; i++) {
            markBoundaryConnectedLand(0, i);
            markBoundaryConnectedLand(n - 1, i);
        }

        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();

            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i], ny = y + dy[i];
                if (nx >= 0 && ny >= 0 && nx < n && ny < m && !vis[nx][ny] &&      grid [nx][ny] == 1) {
                    vis[nx][ny] = true;
                    q.push({nx, ny});
                }
            }
        }

        
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1 && !vis[i][j]) {
                    ans++;
                }
            }
        }

        return ans;
    }
};
